// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CreditToken {
    mapping(address => uint256) public balanceOf;
    string public name = "Credit Token";
    string public symbol = "CT";
    uint8 public decimals = 18;
    uint256 public totalSupply;
    address public owner;

    event Transfer(address indexed from, address indexed to, uint256 value);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function mint(address _to, uint256 _amount) external onlyOwner {
        balanceOf[_to] += _amount;
        totalSupply += _amount;
        emit Transfer(address(0), _to, _amount);
    }

    function transferOwnership(address newOwner) external onlyOwner {
        owner = newOwner;
    }
}

contract CCSC_CompanyRanking {
    enum ApprovalStatus { NotRegistered, Pending, Approved, Rejected }
    ApprovalStatus public status;
    string public companyId;
    string[] public documentHashes;
    mapping(string => uint) public documentScores;
    uint public reportedExpenditures;
    uint public topsisScore;
    CreditToken public CreditTokenContract;

    address public registrationUnit;
    address public approvalUnit;
    address public ceWasteManagement;
    address public constructionCompanyAddress;

    event DocumentSubmitted(string documentHash);
    event DocumentApproved(string documentHash, uint score);
    event CompanyRanked(uint score, string rank, uint credit);

    modifier onlyRegistrationUnit() {
        require(msg.sender == registrationUnit, "Not authorized");
        _;
    }

    modifier onlyApprovalUnit() {
        require(msg.sender == approvalUnit, "Not authorized");
        _;
    }

    modifier onlyCEWasteManagement() {
        require(msg.sender == ceWasteManagement, "Not authorized");
        _;
    }

    constructor(
        address _registrationUnit,
        address _approvalUnit,
        address _ceWasteManagement,
        address _CreditToken
    ) {
        registrationUnit = _registrationUnit;
        approvalUnit = _approvalUnit;
        ceWasteManagement = _ceWasteManagement;
        CreditTokenContract = CreditToken(_CreditToken);
        status = ApprovalStatus.NotRegistered;
    }

    /// Company registration
    function register(string memory _companyId, address _companyAddress) public onlyRegistrationUnit {
        require(status == ApprovalStatus.NotRegistered, "Company already registered");
        companyId = _companyId;
        constructionCompanyAddress = _companyAddress;
        status = ApprovalStatus.Pending;
    }

    /// Submit supporting document
    function submitDocument(string memory documentHash) public {
        require(status == ApprovalStatus.Pending, "Invalid company status");
        documentHashes.push(documentHash);
        emit DocumentSubmitted(documentHash);
    }

    /// Approve and score a submitted document
    function approveDocument(string memory documentHash, uint score) public onlyApprovalUnit {
        require(documentScores[documentHash] == 0, "Document already approved");
        documentScores[documentHash] = score;
        emit DocumentApproved(documentHash, score);
    }

    /// Confirmation by CE Waste Management
    function confirmWithCE(bool isApproved) public onlyCEWasteManagement {
        require(status == ApprovalStatus.Pending, "Invalid company status");
        status = isApproved ? ApprovalStatus.Approved : ApprovalStatus.Rejected;
    }

    /// Report timber expenditures
    function reportExpenditures(uint _amount) public {
        reportedExpenditures = _amount;
    }

    /// Submit TOPSIS score, rank company, and mint credits in one step
    function rankAndIncentiviseCompany(uint _score) public onlyApprovalUnit {
        require(status == ApprovalStatus.Approved);
        require(_score <= 100);

        topsisScore = _score;

        uint percentage;
        string memory rank;

        if (topsisScore >= 90) {
            percentage = 30; rank = "A";
        } else if (topsisScore >= 70) {
            percentage = 20; rank = "B";
        } else if (topsisScore >= 50) {
            percentage = 10; rank = "C";
        } else {
            percentage = 0; rank = "D";
        }

        uint256 credit = (reportedExpenditures * percentage) / 100;
        CreditTokenContract.mint(constructionCompanyAddress, credit);

        emit CompanyRanked(topsisScore, rank, credit);
    }

    /// Helper: get all submitted documents
    function getDocuments() public view returns (string[] memory) {
        return documentHashes;
    }
}
